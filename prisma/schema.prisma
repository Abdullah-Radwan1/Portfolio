enum UserRole {
    USER
    ADMIN
}

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id            String          @id @default(cuid())
    name          String?
    email         String          @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    // Optional for WebAuthn support
    password      String?
    role          UserRole        @default(USER)
    Authenticator Authenticator[]
    orderProducts OrderProduct[]
    createdAt     DateTime        @default(now())
    updatedAt     DateTime        @updatedAt
}

model Account {
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@id([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model VerificationToken {
    identifier String
    token      String
    expires    DateTime

    @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
    credentialID         String  @unique
    userId               String
    providerAccountId    String
    credentialPublicKey  String
    counter              Int
    credentialDeviceType String
    credentialBackedUp   Boolean
    transports           String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@id([userId, credentialID])
}

model Category {
    id       Int       @id @default(autoincrement())
    name     String    @unique // Changed from enum to String
    products Product[] // Fixed relation
}

model Product {
    id          Int            @id @default(autoincrement())
    name        String
    description String
    image       String
    order       Int?
    basePrice   Decimal        @db.Decimal(10, 2)
    createdAt   DateTime       @default(now())
    updatedAt   DateTime       @updatedAt
    orders      OrderProduct[]
    category    Category       @relation(fields: [categoryId], references: [id])
    categoryId  Int
}

model Order {
    id            String         @id @default(uuid())
    paid          Boolean        @default(false)
    subTotal      Float
    deliveryFee   Float
    totalPrice    Float
    userEmail     String
    phone         String
    streetAddress String
    postalCode    String
    city          String
    country       String
    createdAt     DateTime       @default(now())
    updatedAt     DateTime       @updatedAt
    products      OrderProduct[]
}

model OrderProduct {
    id       String @id @default(cuid())
    quantity Int

    order     Order   @relation(fields: [orderId], references: [id])
    orderId   String
    user      User?   @relation(fields: [userId], references: [id])
    userId    String?
    product   Product @relation(fields: [productId], references: [id])
    productId Int
}
